#define _CRT_SECURE_NO_WARNINGS


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{
	int num1 = 0;
	int num2 = 0;
	int sum = 0;
	scanf("%d%d",&num1,& num2);
	sum = num1 + num2;
	printf("sum=%d\n", sum);

	return 0;
}



不安全的,C语言的
//scanf
//strcpy
//strlen
//strcat


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{
	int num1 = 0;
	int num2 = 0;
	int sum = 0;
	scanf("%d%d",&num1,& num2);//scanf是C语言提供的
	sum = num1 + num2;              //scanf_s不是标准C语言提供的，VS编译器提供的
	printf("sum=%d\n", sum);        //不建议使用scanf_s，不具有跨平台性

	return 0;
}


常量---
字面常量
const常变量
#define定义的标识符常变量
枚举变量

------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{
    const int num = 4;          //const--常属性
	printf("%d\n",  num);      //const修饰的常变量
	num = 8;
	printf("%d\n", num);
	//3;          //字面常量
	//3.14       //字面常量

	return 0;
}
-----------

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{                            //const--常属性
	const int n = 10;//n是变量，但又有常属性，所以我们说是常变量
	//int arr[n] = { 0 };
	//[ ]内要放一个常量
	
	
	return 0;
}
-----------------
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define MAX 10     //define 定义的标识符常量
int main()
{
	int arr[MAX] = { 0 };
	printf("%d\n", MAX);
	return 0;
}
----------------------

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
                       //枚举----一一列举
                       //三原色---红，黄，蓝
                       //枚举关键字---enum
enum Sex {

    MALE,                 //MALE,FEMALE,SECRET-----枚举常量
    FEMALE,
    SECRET
};                            
int main()
{
   // enum Sex s = FEMALE;
    printf("%d\n", MALE);//默认是0
    printf("%d\n", FEMALE);//默认1
    printf("%d\n", SECRET);//默认2
	return 0;
}

----------------------

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

enum Color {
    RED,
    YELLOW,
    BLUE
};
int main()
{
    enum Color color = BLUE;//枚举类型创建出的变量可以改的
    color = YELLOW;
   // BLUE = 6;  //枚举类型是不能改的
    return 0;
 }


------------------
字符串+转义字符+注释
字符串         “hello，bit.\n"        ”“；----空字符串
这种有双引号引起来的一串字符称为字符串字面值，或简称字符串
字符串的结束标志是一个\n的转义字符，在计算字符串长度的时候\n是结束标志，不算做字符串内容

转义字符
转变原来的意思
\？  书写连续多个字符时使用，防止被解析成三子母符
\'  用于表示字符常量
\"  用于表示一个字符串内部的双引号
\\  用于表示一个反斜杠，防止他被解析为一个转义序列符
\a  警告字符，蜂鸣
\b  退格符
\f  进纸符
\n  换行
\r  回车
\t  水平制表符
\v  垂直制表符
\ddd   ddd表示1~3个八进制的数字，如\130X
\xdd  dd表示2个十六进制数字，如\x30 0
---------------------
字符串
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{
    char arr1[] = "abc";               //数组
    char arr2[] = { 'a','b','c',0};    //单引号引起的叫字符a，双引号是字符串
    char arr3[] = { 'a','b','c' };    //F10运行到下面，后打开调试，窗口，监视，输入arr1，arr2，arr3
    printf("%s\n", arr1);            //查看不同，arr1比arr2多了一个\0
    printf("%s\n", arr2);            //"abc"--'a','b','c','\0'----'\0'字符串的结束标志
    printf("%s\n", arr3);         //'\0'--0
    return 0;                         //'a'--97   每个字符都有一个值
                                        //’A'--65
}                                      //数据在计算机上存储的时候，存储的是2进制
                                    //ASCII编码
                                     //ASCII码值
------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{
    char arr1[] = "abc";
    char arr2[] = { 'a','b','c' };
    printf("%d\n", strlen(arr1));  //strlen--strlen length--计算字符串长度的
    printf("%d\n", strlen(arr2));//第二个是随机值，不确定，遇到\0就截止
    return 0;
}
-------------------------
转义字符
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{
    printf("abc\n");//  \n使n意思改变
}
-----------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
int main()
{

    
    printf("c:\\test\\32\\test.c");  //普通t，\t就改变了t,再加个\使得\变成普通\
                                          //  \t水平制表符
}
----------------------------------------------
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include<string.h>
int main()
{
	//printf("%d\n", strlen("c:\test\32\test.c"));  // \32是一个转移字符
	                         // \32-----32是2个8进制数字
	                     //   32作为8进制代表的那个十进制数字，作为ASCII码值，对应的字符
	                    //32-->10进制26  ->作为ASSCII码值代表的字符
	                       //132--->Z
	//printf("%c\n", '\32');
	//printf("%c\n", '\x61');
	                         //61 -> a
	return 0;
}